export function printSuccess(message: any): void;
export function printError(message: any): void;
export function printWarning(message: any): void;
export function printInfo(message: any): void;
export function validateArgs(args: any, minLength: any, usage: any): boolean;
export function ensureDirectory(path: any): Promise<boolean>;
export function fileExists(path: any): Promise<boolean>;
export function readJsonFile(path: any, defaultValue?: {}): Promise<any>;
export function writeJsonFile(path: any, data: any): Promise<void>;
export function formatTimestamp(timestamp: any): string;
export function truncateString(str: any, length?: number): any;
export function formatBytes(bytes: any): string;
export function parseFlags(args: any): {
    flags: {};
    args: any[];
};
export function runCommand(command: any, args?: any[], options?: {}): Promise<any>;
export function loadConfig(path?: string): Promise<any>;
export function saveConfig(config: any, path?: string): Promise<void>;
export function generateId(prefix?: string): string;
export function chunk(array: any, size: any): any[];
export function getEnvVar(name: any, defaultValue?: null): string | null;
export function setEnvVar(name: any, value: any): void;
export function isValidJson(str: any): boolean;
export function isValidUrl(str: any): boolean;
export function showProgress(current: any, total: any, message?: string): void;
export function clearLine(): void;
export function sleep(ms: any): Promise<any>;
export function retry(fn: any, maxAttempts?: number, delay?: number): Promise<any>;
export function callRuvSwarmMCP(tool: any, params?: {}): Promise<any>;
export function callRuvSwarmDirectNeural(params?: {}): Promise<{
    success: boolean;
    modelId: string;
    epochs: any;
    accuracy: number;
    training_time: number;
    status: string;
    improvement_rate: string;
    data_source: any;
    wasm_accelerated: boolean;
    real_training: boolean;
    final_loss: any;
    learning_rate: any;
    training_file: string;
    timestamp: any;
    ruv_swarm_executed?: undefined;
} | {
    success: boolean;
    modelId: string;
    epochs: any;
    accuracy: number;
    training_time: number;
    status: string;
    improvement_rate: string;
    data_source: any;
    wasm_accelerated: boolean;
    real_training: boolean;
    ruv_swarm_executed: boolean;
    timestamp: string;
    final_loss?: undefined;
    learning_rate?: undefined;
    training_file?: undefined;
}>;
export function execRuvSwarmHook(hookName: any, params?: {}): Promise<{
    success: boolean;
    output: any;
    stderr: any;
}>;
export function checkRuvSwarmAvailable(): Promise<any>;
export function trainNeuralModel(modelName: any, dataSource: any, epochs?: number): Promise<any>;
export function updateNeuralPattern(operation: any, outcome: any, metadata?: {}): Promise<any>;
export function getSwarmStatus(swarmId?: null): Promise<any>;
export function spawnSwarmAgent(agentType: any, config?: {}): Promise<any>;
//# sourceMappingURL=utils.d.ts.map